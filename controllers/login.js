const jwt = require('jsonwebtoken');
const Login = require('../models/network');
const Keys = require('../config/keys');

module.exports = {
    /*
        Will be translated to get("/people") (first level is generated by controller name)
    */
    userLogin: async(req, res, next) => {
        // console.log('Post for login controller');

        const username = req.body.username;
        const password = req.body.password;
        // console.log(username);
        // console.log(password);

        // call model here
        try {
            let db_slug = req.cookies['siteHeader'].db_slug;
            let query = { $and: [{ email: username }, { $or: [{ user_type: 5 }, { user_type: 6 }] }] }
            let user = await Login.getUserByUsername(db_slug, query);
            if (!user.success) {
                query = { $and: [{ email: username }, { user_type: 6 }] }
                user = await Login.getUserByUsername( Keys.domain.core, query);
                if (!user.success){
                    let notify = [];
                    notify.push({ title: "Notification", type: "notice", text: "Username does not match." });
                    req.session.notify = notify;
                    return res.redirect('/login');
                }else user = user.data
                // return res.redirect('/login');
            } else {
                user = user.data
            }

            let pass = await Login.comparePassword(password, user.password);
            // console.log('pass ', pass);
            if (!pass) {
                let notify = [];
                notify.push({ title: "Notification", type: "notice", text: "Password does not match." });
                req.session.notify = notify;
                return res.redirect('/login');
            }else{
                delete user.password;   //  its not working now
                user.password = '';
            }
            jwt.sign({ user }, Keys.usersession.secretKey, { expiresIn: '3h' }, (err, token) => {
                if (err) {
                    res.redirect('/login'); // redirect to login page if token not found
                } else {
                    res.cookie('authorization', token, {
                        maxAge: 3 * 60 * 60 * 1000, // 3 hours
                        // httpOnly: true, // http only, prevents JavaScript cookie access
                        // secure: true // cookie must be sent over https / ssl
                    });
                    return res.redirect('dashboard'); // Continue execution
                }
            });
        } catch (e) {
            next(e);
        }

    },

    // FORMAT OF TOKEN
    // Authorization: Bearer <access_token>
    // Verify Token
    verifyToken: async (req, res, next) => {
        // console.log('verify Token', req.cookies);
        // const bearerHeader = req.headers['authorization'];    // Get auth header value
        const bearerHeader = req.cookies['authorization']; // Get auth header value
        if (typeof bearerHeader !== 'undefined') { // Check if bearer is undefined
            // req.token = bearerHeader.split(' ')[1];
            req.token = bearerHeader;
            await jwt.verify(req.token, Keys.usersession.secretKey, (err, authData) => {
                if (err) {
                    res.redirect('/login'); // redirect to login page if token not found
                } else {
                    // ############################################################
                    //            this variable is global variable 
                                    userHeader = authData.user;
                    // ############################################################
                    // console.log('userHeader', userHeader);
                    res.cookie('userHeader', userHeader, {
                        maxAge: 3 * 60 * 60 * 1000, // 3 hours
                        // httpOnly: true, // http only, prevents JavaScript cookie access
                        // secure: true // cookie must be sent over https / ssl
                    });
                    next(); // Continue execution
                }
            });
        } else {
            res.redirect('/login'); // redirect to home page if token not found
        }

    }
}